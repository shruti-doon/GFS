// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: protofiles/master/master.proto

package master

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MasterService_HeartbeatRPC_FullMethodName                = "/masterpb.MasterService/HeartbeatRPC"
	MasterService_CreateFileRPC_FullMethodName               = "/masterpb.MasterService/CreateFileRPC"
	MasterService_CreateDirectoryRPC_FullMethodName          = "/masterpb.MasterService/CreateDirectoryRPC"
	MasterService_GetChunkDetailsForWriteRPC_FullMethodName  = "/masterpb.MasterService/GetChunkDetailsForWriteRPC"
	MasterService_GetChunkDetailsForAppendRPC_FullMethodName = "/masterpb.MasterService/GetChunkDetailsForAppendRPC"
	MasterService_GetChunkDetailsForReadRPC_FullMethodName   = "/masterpb.MasterService/GetChunkDetailsForReadRPC"
	MasterService_DeleteFileRPC_FullMethodName               = "/masterpb.MasterService/DeleteFileRPC"
	MasterService_UndeleteFileRPC_FullMethodName             = "/masterpb.MasterService/UndeleteFileRPC"
	MasterService_RegisterShadowMasterRPC_FullMethodName     = "/masterpb.MasterService/RegisterShadowMasterRPC"
	MasterService_ReplicateLogRPC_FullMethodName             = "/masterpb.MasterService/ReplicateLogRPC"
	MasterService_NotifyMasterFailureRPC_FullMethodName      = "/masterpb.MasterService/NotifyMasterFailureRPC"
)

// MasterServiceClient is the client API for MasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterServiceClient interface {
	HeartbeatRPC(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*HeartbeatRes, error)
	CreateFileRPC(ctx context.Context, in *CreateFileReq, opts ...grpc.CallOption) (*CreateFileRes, error)
	CreateDirectoryRPC(ctx context.Context, in *CreateDirectoryReq, opts ...grpc.CallOption) (*CreateDirectoryRes, error)
	GetChunkDetailsForWriteRPC(ctx context.Context, in *WriteReq, opts ...grpc.CallOption) (*WriteRes, error)
	GetChunkDetailsForAppendRPC(ctx context.Context, in *AppendReq, opts ...grpc.CallOption) (*AppendRes, error)
	GetChunkDetailsForReadRPC(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*ReadRes, error)
	DeleteFileRPC(ctx context.Context, in *DeleteFileReq, opts ...grpc.CallOption) (*DeleteFileRes, error)
	UndeleteFileRPC(ctx context.Context, in *UndeleteFileReq, opts ...grpc.CallOption) (*UndeleteFileRes, error)
	RegisterShadowMasterRPC(ctx context.Context, in *RegisterShadowMasterReq, opts ...grpc.CallOption) (*RegisterShadowMasterRes, error)
	ReplicateLogRPC(ctx context.Context, in *ReplicateLogReq, opts ...grpc.CallOption) (*ReplicateLogRes, error)
	NotifyMasterFailureRPC(ctx context.Context, in *NotifyMasterFailureReq, opts ...grpc.CallOption) (*NotifyMasterFailureRes, error)
}

type masterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterServiceClient(cc grpc.ClientConnInterface) MasterServiceClient {
	return &masterServiceClient{cc}
}

func (c *masterServiceClient) HeartbeatRPC(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*HeartbeatRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatRes)
	err := c.cc.Invoke(ctx, MasterService_HeartbeatRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) CreateFileRPC(ctx context.Context, in *CreateFileReq, opts ...grpc.CallOption) (*CreateFileRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFileRes)
	err := c.cc.Invoke(ctx, MasterService_CreateFileRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) CreateDirectoryRPC(ctx context.Context, in *CreateDirectoryReq, opts ...grpc.CallOption) (*CreateDirectoryRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDirectoryRes)
	err := c.cc.Invoke(ctx, MasterService_CreateDirectoryRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetChunkDetailsForWriteRPC(ctx context.Context, in *WriteReq, opts ...grpc.CallOption) (*WriteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteRes)
	err := c.cc.Invoke(ctx, MasterService_GetChunkDetailsForWriteRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetChunkDetailsForAppendRPC(ctx context.Context, in *AppendReq, opts ...grpc.CallOption) (*AppendRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppendRes)
	err := c.cc.Invoke(ctx, MasterService_GetChunkDetailsForAppendRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetChunkDetailsForReadRPC(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*ReadRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadRes)
	err := c.cc.Invoke(ctx, MasterService_GetChunkDetailsForReadRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) DeleteFileRPC(ctx context.Context, in *DeleteFileReq, opts ...grpc.CallOption) (*DeleteFileRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFileRes)
	err := c.cc.Invoke(ctx, MasterService_DeleteFileRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) UndeleteFileRPC(ctx context.Context, in *UndeleteFileReq, opts ...grpc.CallOption) (*UndeleteFileRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UndeleteFileRes)
	err := c.cc.Invoke(ctx, MasterService_UndeleteFileRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) RegisterShadowMasterRPC(ctx context.Context, in *RegisterShadowMasterReq, opts ...grpc.CallOption) (*RegisterShadowMasterRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterShadowMasterRes)
	err := c.cc.Invoke(ctx, MasterService_RegisterShadowMasterRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ReplicateLogRPC(ctx context.Context, in *ReplicateLogReq, opts ...grpc.CallOption) (*ReplicateLogRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplicateLogRes)
	err := c.cc.Invoke(ctx, MasterService_ReplicateLogRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) NotifyMasterFailureRPC(ctx context.Context, in *NotifyMasterFailureReq, opts ...grpc.CallOption) (*NotifyMasterFailureRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotifyMasterFailureRes)
	err := c.cc.Invoke(ctx, MasterService_NotifyMasterFailureRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServiceServer is the server API for MasterService service.
// All implementations must embed UnimplementedMasterServiceServer
// for forward compatibility.
type MasterServiceServer interface {
	HeartbeatRPC(context.Context, *HeartbeatReq) (*HeartbeatRes, error)
	CreateFileRPC(context.Context, *CreateFileReq) (*CreateFileRes, error)
	CreateDirectoryRPC(context.Context, *CreateDirectoryReq) (*CreateDirectoryRes, error)
	GetChunkDetailsForWriteRPC(context.Context, *WriteReq) (*WriteRes, error)
	GetChunkDetailsForAppendRPC(context.Context, *AppendReq) (*AppendRes, error)
	GetChunkDetailsForReadRPC(context.Context, *ReadReq) (*ReadRes, error)
	DeleteFileRPC(context.Context, *DeleteFileReq) (*DeleteFileRes, error)
	UndeleteFileRPC(context.Context, *UndeleteFileReq) (*UndeleteFileRes, error)
	RegisterShadowMasterRPC(context.Context, *RegisterShadowMasterReq) (*RegisterShadowMasterRes, error)
	ReplicateLogRPC(context.Context, *ReplicateLogReq) (*ReplicateLogRes, error)
	NotifyMasterFailureRPC(context.Context, *NotifyMasterFailureReq) (*NotifyMasterFailureRes, error)
	mustEmbedUnimplementedMasterServiceServer()
}

// UnimplementedMasterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMasterServiceServer struct{}

func (UnimplementedMasterServiceServer) HeartbeatRPC(context.Context, *HeartbeatReq) (*HeartbeatRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartbeatRPC not implemented")
}
func (UnimplementedMasterServiceServer) CreateFileRPC(context.Context, *CreateFileReq) (*CreateFileRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFileRPC not implemented")
}
func (UnimplementedMasterServiceServer) CreateDirectoryRPC(context.Context, *CreateDirectoryReq) (*CreateDirectoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDirectoryRPC not implemented")
}
func (UnimplementedMasterServiceServer) GetChunkDetailsForWriteRPC(context.Context, *WriteReq) (*WriteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunkDetailsForWriteRPC not implemented")
}
func (UnimplementedMasterServiceServer) GetChunkDetailsForAppendRPC(context.Context, *AppendReq) (*AppendRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunkDetailsForAppendRPC not implemented")
}
func (UnimplementedMasterServiceServer) GetChunkDetailsForReadRPC(context.Context, *ReadReq) (*ReadRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunkDetailsForReadRPC not implemented")
}
func (UnimplementedMasterServiceServer) DeleteFileRPC(context.Context, *DeleteFileReq) (*DeleteFileRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFileRPC not implemented")
}
func (UnimplementedMasterServiceServer) UndeleteFileRPC(context.Context, *UndeleteFileReq) (*UndeleteFileRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeleteFileRPC not implemented")
}
func (UnimplementedMasterServiceServer) RegisterShadowMasterRPC(context.Context, *RegisterShadowMasterReq) (*RegisterShadowMasterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterShadowMasterRPC not implemented")
}
func (UnimplementedMasterServiceServer) ReplicateLogRPC(context.Context, *ReplicateLogReq) (*ReplicateLogRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicateLogRPC not implemented")
}
func (UnimplementedMasterServiceServer) NotifyMasterFailureRPC(context.Context, *NotifyMasterFailureReq) (*NotifyMasterFailureRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyMasterFailureRPC not implemented")
}
func (UnimplementedMasterServiceServer) mustEmbedUnimplementedMasterServiceServer() {}
func (UnimplementedMasterServiceServer) testEmbeddedByValue()                       {}

// UnsafeMasterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterServiceServer will
// result in compilation errors.
type UnsafeMasterServiceServer interface {
	mustEmbedUnimplementedMasterServiceServer()
}

func RegisterMasterServiceServer(s grpc.ServiceRegistrar, srv MasterServiceServer) {
	// If the following call pancis, it indicates UnimplementedMasterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MasterService_ServiceDesc, srv)
}

func _MasterService_HeartbeatRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).HeartbeatRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterService_HeartbeatRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).HeartbeatRPC(ctx, req.(*HeartbeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_CreateFileRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).CreateFileRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterService_CreateFileRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).CreateFileRPC(ctx, req.(*CreateFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_CreateDirectoryRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDirectoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).CreateDirectoryRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterService_CreateDirectoryRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).CreateDirectoryRPC(ctx, req.(*CreateDirectoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetChunkDetailsForWriteRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetChunkDetailsForWriteRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterService_GetChunkDetailsForWriteRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetChunkDetailsForWriteRPC(ctx, req.(*WriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetChunkDetailsForAppendRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetChunkDetailsForAppendRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterService_GetChunkDetailsForAppendRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetChunkDetailsForAppendRPC(ctx, req.(*AppendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetChunkDetailsForReadRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetChunkDetailsForReadRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterService_GetChunkDetailsForReadRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetChunkDetailsForReadRPC(ctx, req.(*ReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_DeleteFileRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).DeleteFileRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterService_DeleteFileRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).DeleteFileRPC(ctx, req.(*DeleteFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_UndeleteFileRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeleteFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).UndeleteFileRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterService_UndeleteFileRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).UndeleteFileRPC(ctx, req.(*UndeleteFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_RegisterShadowMasterRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterShadowMasterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).RegisterShadowMasterRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterService_RegisterShadowMasterRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).RegisterShadowMasterRPC(ctx, req.(*RegisterShadowMasterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ReplicateLogRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicateLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ReplicateLogRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterService_ReplicateLogRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ReplicateLogRPC(ctx, req.(*ReplicateLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_NotifyMasterFailureRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyMasterFailureReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).NotifyMasterFailureRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterService_NotifyMasterFailureRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).NotifyMasterFailureRPC(ctx, req.(*NotifyMasterFailureReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterService_ServiceDesc is the grpc.ServiceDesc for MasterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "masterpb.MasterService",
	HandlerType: (*MasterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeartbeatRPC",
			Handler:    _MasterService_HeartbeatRPC_Handler,
		},
		{
			MethodName: "CreateFileRPC",
			Handler:    _MasterService_CreateFileRPC_Handler,
		},
		{
			MethodName: "CreateDirectoryRPC",
			Handler:    _MasterService_CreateDirectoryRPC_Handler,
		},
		{
			MethodName: "GetChunkDetailsForWriteRPC",
			Handler:    _MasterService_GetChunkDetailsForWriteRPC_Handler,
		},
		{
			MethodName: "GetChunkDetailsForAppendRPC",
			Handler:    _MasterService_GetChunkDetailsForAppendRPC_Handler,
		},
		{
			MethodName: "GetChunkDetailsForReadRPC",
			Handler:    _MasterService_GetChunkDetailsForReadRPC_Handler,
		},
		{
			MethodName: "DeleteFileRPC",
			Handler:    _MasterService_DeleteFileRPC_Handler,
		},
		{
			MethodName: "UndeleteFileRPC",
			Handler:    _MasterService_UndeleteFileRPC_Handler,
		},
		{
			MethodName: "RegisterShadowMasterRPC",
			Handler:    _MasterService_RegisterShadowMasterRPC_Handler,
		},
		{
			MethodName: "ReplicateLogRPC",
			Handler:    _MasterService_ReplicateLogRPC_Handler,
		},
		{
			MethodName: "NotifyMasterFailureRPC",
			Handler:    _MasterService_NotifyMasterFailureRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/master/master.proto",
}
