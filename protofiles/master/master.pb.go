// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: protofiles/master/master.proto

package master

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Chunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	Version       int64                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	HasError      bool                   `protobuf:"varint,3,opt,name=hasError,proto3" json:"hasError,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	mi := &file_protofiles_master_master_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_master_master_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_protofiles_master_master_proto_rawDescGZIP(), []int{0}
}

func (x *Chunk) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *Chunk) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Chunk) GetHasError() bool {
	if x != nil {
		return x.HasError
	}
	return false
}

type HeartbeatReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Chunks        []*Chunk               `protobuf:"bytes,2,rep,name=Chunks,proto3" json:"Chunks,omitempty"`
	DiskSpace     uint64                 `protobuf:"varint,3,opt,name=diskSpace,proto3" json:"diskSpace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeartbeatReq) Reset() {
	*x = HeartbeatReq{}
	mi := &file_protofiles_master_master_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatReq) ProtoMessage() {}

func (x *HeartbeatReq) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_master_master_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatReq.ProtoReflect.Descriptor instead.
func (*HeartbeatReq) Descriptor() ([]byte, []int) {
	return file_protofiles_master_master_proto_rawDescGZIP(), []int{1}
}

func (x *HeartbeatReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *HeartbeatReq) GetChunks() []*Chunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

func (x *HeartbeatReq) GetDiskSpace() uint64 {
	if x != nil {
		return x.DiskSpace
	}
	return 0
}

type HeartbeatRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeartbeatRes) Reset() {
	*x = HeartbeatRes{}
	mi := &file_protofiles_master_master_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatRes) ProtoMessage() {}

func (x *HeartbeatRes) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_master_master_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatRes.ProtoReflect.Descriptor instead.
func (*HeartbeatRes) Descriptor() ([]byte, []int) {
	return file_protofiles_master_master_proto_rawDescGZIP(), []int{2}
}

func (x *HeartbeatRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type CreateFileReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilePath      string                 `protobuf:"bytes,1,opt,name=filePath,proto3" json:"filePath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFileReq) Reset() {
	*x = CreateFileReq{}
	mi := &file_protofiles_master_master_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileReq) ProtoMessage() {}

func (x *CreateFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_master_master_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileReq.ProtoReflect.Descriptor instead.
func (*CreateFileReq) Descriptor() ([]byte, []int) {
	return file_protofiles_master_master_proto_rawDescGZIP(), []int{3}
}

func (x *CreateFileReq) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

type CreateFileRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFileRes) Reset() {
	*x = CreateFileRes{}
	mi := &file_protofiles_master_master_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFileRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileRes) ProtoMessage() {}

func (x *CreateFileRes) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_master_master_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileRes.ProtoReflect.Descriptor instead.
func (*CreateFileRes) Descriptor() ([]byte, []int) {
	return file_protofiles_master_master_proto_rawDescGZIP(), []int{4}
}

func (x *CreateFileRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type CreateDirectoryReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DirectoryPath string                 `protobuf:"bytes,1,opt,name=directoryPath,proto3" json:"directoryPath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDirectoryReq) Reset() {
	*x = CreateDirectoryReq{}
	mi := &file_protofiles_master_master_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDirectoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDirectoryReq) ProtoMessage() {}

func (x *CreateDirectoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_master_master_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDirectoryReq.ProtoReflect.Descriptor instead.
func (*CreateDirectoryReq) Descriptor() ([]byte, []int) {
	return file_protofiles_master_master_proto_rawDescGZIP(), []int{5}
}

func (x *CreateDirectoryReq) GetDirectoryPath() string {
	if x != nil {
		return x.DirectoryPath
	}
	return ""
}

type CreateDirectoryRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDirectoryRes) Reset() {
	*x = CreateDirectoryRes{}
	mi := &file_protofiles_master_master_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDirectoryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDirectoryRes) ProtoMessage() {}

func (x *CreateDirectoryRes) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_master_master_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDirectoryRes.ProtoReflect.Descriptor instead.
func (*CreateDirectoryRes) Descriptor() ([]byte, []int) {
	return file_protofiles_master_master_proto_rawDescGZIP(), []int{6}
}

func (x *CreateDirectoryRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type WriteReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilePath      string                 `protobuf:"bytes,1,opt,name=filePath,proto3" json:"filePath,omitempty"`
	ChunkIndex    int64                  `protobuf:"varint,2,opt,name=chunkIndex,proto3" json:"chunkIndex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteReq) Reset() {
	*x = WriteReq{}
	mi := &file_protofiles_master_master_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteReq) ProtoMessage() {}

func (x *WriteReq) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_master_master_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteReq.ProtoReflect.Descriptor instead.
func (*WriteReq) Descriptor() ([]byte, []int) {
	return file_protofiles_master_master_proto_rawDescGZIP(), []int{7}
}

func (x *WriteReq) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *WriteReq) GetChunkIndex() int64 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

type WriteRes struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ChunkId        string                 `protobuf:"bytes,1,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	ChunkVersion   int64                  `protobuf:"varint,2,opt,name=chunkVersion,proto3" json:"chunkVersion,omitempty"`
	PrimaryAddress string                 `protobuf:"bytes,3,opt,name=primaryAddress,proto3" json:"primaryAddress,omitempty"`
	Replicas       []string               `protobuf:"bytes,4,rep,name=replicas,proto3" json:"replicas,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WriteRes) Reset() {
	*x = WriteRes{}
	mi := &file_protofiles_master_master_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRes) ProtoMessage() {}

func (x *WriteRes) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_master_master_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRes.ProtoReflect.Descriptor instead.
func (*WriteRes) Descriptor() ([]byte, []int) {
	return file_protofiles_master_master_proto_rawDescGZIP(), []int{8}
}

func (x *WriteRes) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *WriteRes) GetChunkVersion() int64 {
	if x != nil {
		return x.ChunkVersion
	}
	return 0
}

func (x *WriteRes) GetPrimaryAddress() string {
	if x != nil {
		return x.PrimaryAddress
	}
	return ""
}

func (x *WriteRes) GetReplicas() []string {
	if x != nil {
		return x.Replicas
	}
	return nil
}

type AppendReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilePath      string                 `protobuf:"bytes,1,opt,name=filePath,proto3" json:"filePath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppendReq) Reset() {
	*x = AppendReq{}
	mi := &file_protofiles_master_master_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendReq) ProtoMessage() {}

func (x *AppendReq) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_master_master_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendReq.ProtoReflect.Descriptor instead.
func (*AppendReq) Descriptor() ([]byte, []int) {
	return file_protofiles_master_master_proto_rawDescGZIP(), []int{9}
}

func (x *AppendReq) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

type AppendRes struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ChunkId        string                 `protobuf:"bytes,1,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	ChunkVersion   int64                  `protobuf:"varint,2,opt,name=chunkVersion,proto3" json:"chunkVersion,omitempty"`
	PrimaryAddress string                 `protobuf:"bytes,3,opt,name=primaryAddress,proto3" json:"primaryAddress,omitempty"`
	Replicas       []string               `protobuf:"bytes,4,rep,name=replicas,proto3" json:"replicas,omitempty"`
	ChunkIndex     int64                  `protobuf:"varint,5,opt,name=chunkIndex,proto3" json:"chunkIndex,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AppendRes) Reset() {
	*x = AppendRes{}
	mi := &file_protofiles_master_master_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendRes) ProtoMessage() {}

func (x *AppendRes) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_master_master_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendRes.ProtoReflect.Descriptor instead.
func (*AppendRes) Descriptor() ([]byte, []int) {
	return file_protofiles_master_master_proto_rawDescGZIP(), []int{10}
}

func (x *AppendRes) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *AppendRes) GetChunkVersion() int64 {
	if x != nil {
		return x.ChunkVersion
	}
	return 0
}

func (x *AppendRes) GetPrimaryAddress() string {
	if x != nil {
		return x.PrimaryAddress
	}
	return ""
}

func (x *AppendRes) GetReplicas() []string {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *AppendRes) GetChunkIndex() int64 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

type ReadReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilePath      string                 `protobuf:"bytes,1,opt,name=filePath,proto3" json:"filePath,omitempty"`
	ChunkIndex    int64                  `protobuf:"varint,2,opt,name=chunkIndex,proto3" json:"chunkIndex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadReq) Reset() {
	*x = ReadReq{}
	mi := &file_protofiles_master_master_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadReq) ProtoMessage() {}

func (x *ReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_master_master_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadReq.ProtoReflect.Descriptor instead.
func (*ReadReq) Descriptor() ([]byte, []int) {
	return file_protofiles_master_master_proto_rawDescGZIP(), []int{11}
}

func (x *ReadReq) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *ReadReq) GetChunkIndex() int64 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

type ReadRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	Locations     []string               `protobuf:"bytes,2,rep,name=locations,proto3" json:"locations,omitempty"`
	ChunkIndex    int64                  `protobuf:"varint,3,opt,name=chunkIndex,proto3" json:"chunkIndex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadRes) Reset() {
	*x = ReadRes{}
	mi := &file_protofiles_master_master_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRes) ProtoMessage() {}

func (x *ReadRes) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_master_master_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRes.ProtoReflect.Descriptor instead.
func (*ReadRes) Descriptor() ([]byte, []int) {
	return file_protofiles_master_master_proto_rawDescGZIP(), []int{12}
}

func (x *ReadRes) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *ReadRes) GetLocations() []string {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *ReadRes) GetChunkIndex() int64 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

type DeleteFileReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilePath      string                 `protobuf:"bytes,1,opt,name=filePath,proto3" json:"filePath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFileReq) Reset() {
	*x = DeleteFileReq{}
	mi := &file_protofiles_master_master_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileReq) ProtoMessage() {}

func (x *DeleteFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_master_master_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileReq.ProtoReflect.Descriptor instead.
func (*DeleteFileReq) Descriptor() ([]byte, []int) {
	return file_protofiles_master_master_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteFileReq) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

type DeleteFileRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFileRes) Reset() {
	*x = DeleteFileRes{}
	mi := &file_protofiles_master_master_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFileRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileRes) ProtoMessage() {}

func (x *DeleteFileRes) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_master_master_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileRes.ProtoReflect.Descriptor instead.
func (*DeleteFileRes) Descriptor() ([]byte, []int) {
	return file_protofiles_master_master_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteFileRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type UndeleteFileReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilePath      string                 `protobuf:"bytes,1,opt,name=filePath,proto3" json:"filePath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UndeleteFileReq) Reset() {
	*x = UndeleteFileReq{}
	mi := &file_protofiles_master_master_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UndeleteFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndeleteFileReq) ProtoMessage() {}

func (x *UndeleteFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_master_master_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndeleteFileReq.ProtoReflect.Descriptor instead.
func (*UndeleteFileReq) Descriptor() ([]byte, []int) {
	return file_protofiles_master_master_proto_rawDescGZIP(), []int{15}
}

func (x *UndeleteFileReq) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

type UndeleteFileRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UndeleteFileRes) Reset() {
	*x = UndeleteFileRes{}
	mi := &file_protofiles_master_master_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UndeleteFileRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndeleteFileRes) ProtoMessage() {}

func (x *UndeleteFileRes) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_master_master_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndeleteFileRes.ProtoReflect.Descriptor instead.
func (*UndeleteFileRes) Descriptor() ([]byte, []int) {
	return file_protofiles_master_master_proto_rawDescGZIP(), []int{16}
}

func (x *UndeleteFileRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type RegisterShadowMasterReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterShadowMasterReq) Reset() {
	*x = RegisterShadowMasterReq{}
	mi := &file_protofiles_master_master_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterShadowMasterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterShadowMasterReq) ProtoMessage() {}

func (x *RegisterShadowMasterReq) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_master_master_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterShadowMasterReq.ProtoReflect.Descriptor instead.
func (*RegisterShadowMasterReq) Descriptor() ([]byte, []int) {
	return file_protofiles_master_master_proto_rawDescGZIP(), []int{17}
}

func (x *RegisterShadowMasterReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type RegisterShadowMasterRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	CurrentLogSeq int64                  `protobuf:"varint,2,opt,name=current_log_seq,json=currentLogSeq,proto3" json:"current_log_seq,omitempty"` // Current log sequence number on primary
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterShadowMasterRes) Reset() {
	*x = RegisterShadowMasterRes{}
	mi := &file_protofiles_master_master_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterShadowMasterRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterShadowMasterRes) ProtoMessage() {}

func (x *RegisterShadowMasterRes) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_master_master_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterShadowMasterRes.ProtoReflect.Descriptor instead.
func (*RegisterShadowMasterRes) Descriptor() ([]byte, []int) {
	return file_protofiles_master_master_proto_rawDescGZIP(), []int{18}
}

func (x *RegisterShadowMasterRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegisterShadowMasterRes) GetCurrentLogSeq() int64 {
	if x != nil {
		return x.CurrentLogSeq
	}
	return 0
}

type LogEntryProto struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SequenceNum   int64                  `protobuf:"varint,1,opt,name=sequence_num,json=sequenceNum,proto3" json:"sequence_num,omitempty"`
	OpType        string                 `protobuf:"bytes,2,opt,name=op_type,json=opType,proto3" json:"op_type,omitempty"`
	Path          string                 `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	DataJson      string                 `protobuf:"bytes,4,opt,name=data_json,json=dataJson,proto3" json:"data_json,omitempty"` // JSON serialized data
	Timestamp     int64                  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogEntryProto) Reset() {
	*x = LogEntryProto{}
	mi := &file_protofiles_master_master_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogEntryProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntryProto) ProtoMessage() {}

func (x *LogEntryProto) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_master_master_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntryProto.ProtoReflect.Descriptor instead.
func (*LogEntryProto) Descriptor() ([]byte, []int) {
	return file_protofiles_master_master_proto_rawDescGZIP(), []int{19}
}

func (x *LogEntryProto) GetSequenceNum() int64 {
	if x != nil {
		return x.SequenceNum
	}
	return 0
}

func (x *LogEntryProto) GetOpType() string {
	if x != nil {
		return x.OpType
	}
	return ""
}

func (x *LogEntryProto) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *LogEntryProto) GetDataJson() string {
	if x != nil {
		return x.DataJson
	}
	return ""
}

func (x *LogEntryProto) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type ReplicateLogReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entries       []*LogEntryProto       `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	IsCheckpoint  bool                   `protobuf:"varint,2,opt,name=is_checkpoint,json=isCheckpoint,proto3" json:"is_checkpoint,omitempty"` // Indicates if this contains a full state checkpoint
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicateLogReq) Reset() {
	*x = ReplicateLogReq{}
	mi := &file_protofiles_master_master_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicateLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicateLogReq) ProtoMessage() {}

func (x *ReplicateLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_master_master_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicateLogReq.ProtoReflect.Descriptor instead.
func (*ReplicateLogReq) Descriptor() ([]byte, []int) {
	return file_protofiles_master_master_proto_rawDescGZIP(), []int{20}
}

func (x *ReplicateLogReq) GetEntries() []*LogEntryProto {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *ReplicateLogReq) GetIsCheckpoint() bool {
	if x != nil {
		return x.IsCheckpoint
	}
	return false
}

type ReplicateLogRes struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Success        bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	LastAppliedSeq int64                  `protobuf:"varint,2,opt,name=last_applied_seq,json=lastAppliedSeq,proto3" json:"last_applied_seq,omitempty"` // Last sequence number successfully applied
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ReplicateLogRes) Reset() {
	*x = ReplicateLogRes{}
	mi := &file_protofiles_master_master_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicateLogRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicateLogRes) ProtoMessage() {}

func (x *ReplicateLogRes) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_master_master_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicateLogRes.ProtoReflect.Descriptor instead.
func (*ReplicateLogRes) Descriptor() ([]byte, []int) {
	return file_protofiles_master_master_proto_rawDescGZIP(), []int{21}
}

func (x *ReplicateLogRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ReplicateLogRes) GetLastAppliedSeq() int64 {
	if x != nil {
		return x.LastAppliedSeq
	}
	return 0
}

type NotifyMasterFailureReq struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	FailedMasterAddress string                 `protobuf:"bytes,1,opt,name=failed_master_address,json=failedMasterAddress,proto3" json:"failed_master_address,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NotifyMasterFailureReq) Reset() {
	*x = NotifyMasterFailureReq{}
	mi := &file_protofiles_master_master_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotifyMasterFailureReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyMasterFailureReq) ProtoMessage() {}

func (x *NotifyMasterFailureReq) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_master_master_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyMasterFailureReq.ProtoReflect.Descriptor instead.
func (*NotifyMasterFailureReq) Descriptor() ([]byte, []int) {
	return file_protofiles_master_master_proto_rawDescGZIP(), []int{22}
}

func (x *NotifyMasterFailureReq) GetFailedMasterAddress() string {
	if x != nil {
		return x.FailedMasterAddress
	}
	return ""
}

type NotifyMasterFailureRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Acknowledged  bool                   `protobuf:"varint,1,opt,name=acknowledged,proto3" json:"acknowledged,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotifyMasterFailureRes) Reset() {
	*x = NotifyMasterFailureRes{}
	mi := &file_protofiles_master_master_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotifyMasterFailureRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyMasterFailureRes) ProtoMessage() {}

func (x *NotifyMasterFailureRes) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_master_master_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyMasterFailureRes.ProtoReflect.Descriptor instead.
func (*NotifyMasterFailureRes) Descriptor() ([]byte, []int) {
	return file_protofiles_master_master_proto_rawDescGZIP(), []int{23}
}

func (x *NotifyMasterFailureRes) GetAcknowledged() bool {
	if x != nil {
		return x.Acknowledged
	}
	return false
}

var File_protofiles_master_master_proto protoreflect.FileDescriptor

var file_protofiles_master_master_proto_rawDesc = string([]byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x70, 0x62, 0x22, 0x57, 0x0a, 0x05, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x6f, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a,
	0x06, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x06,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x22, 0x28, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x2b,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x29, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x3a, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0d,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61,
	0x74, 0x68, 0x22, 0x2e, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0x46, 0x0a, 0x08, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x8c, 0x01, 0x0a, 0x08, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x22, 0x27, 0x0a, 0x09, 0x41, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x22, 0xad, 0x01, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x45, 0x0a, 0x07, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x61, 0x0a, 0x07, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x2b, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x29, 0x0a, 0x0d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x2d, 0x0a, 0x0f, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x22, 0x2b, 0x0a, 0x0f, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0x33, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x5b, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x53,
	0x65, 0x71, 0x22, 0x9a, 0x01, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6a, 0x73, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x4a, 0x73, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x69, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x71, 0x12, 0x31, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x4c,
	0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x55, 0x0a, 0x0f, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x53, 0x65,
	0x71, 0x22, 0x4c, 0x0a, 0x16, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x15, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x3c, 0x0a, 0x16, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x32, 0xca, 0x06,
	0x0a, 0x0d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x3e, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x50, 0x43, 0x12,
	0x16, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x12,
	0x41, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x50, 0x43,
	0x12, 0x17, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x12, 0x50, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x50, 0x43, 0x12, 0x1c, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x70,
	0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52,
	0x50, 0x43, 0x12, 0x12, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x70,
	0x62, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x46, 0x6f, 0x72,
	0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x50, 0x43, 0x12, 0x13, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x13,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x52, 0x50, 0x43,
	0x12, 0x11, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x50, 0x43, 0x12, 0x17, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x17, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x55, 0x6e, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x50, 0x43, 0x12, 0x19, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x70, 0x62, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x12, 0x5f, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x50, 0x43, 0x12, 0x21, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x21, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x67, 0x52, 0x50, 0x43, 0x12, 0x19, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x71, 0x1a, 0x19, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x16,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x52, 0x50, 0x43, 0x12, 0x20, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x70,
	0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x42, 0x53, 0x5a, 0x51, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x61, 0x68, 0x61, 0x72, 0x69, 0x73,
	0x69, 0x72, 0x69, 0x31, 0x32, 0x33, 0x2f, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x64, 0x2d, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2d, 0x46, 0x69, 0x6c, 0x65, 0x2d, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_protofiles_master_master_proto_rawDescOnce sync.Once
	file_protofiles_master_master_proto_rawDescData []byte
)

func file_protofiles_master_master_proto_rawDescGZIP() []byte {
	file_protofiles_master_master_proto_rawDescOnce.Do(func() {
		file_protofiles_master_master_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_protofiles_master_master_proto_rawDesc), len(file_protofiles_master_master_proto_rawDesc)))
	})
	return file_protofiles_master_master_proto_rawDescData
}

var file_protofiles_master_master_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_protofiles_master_master_proto_goTypes = []any{
	(*Chunk)(nil),                   // 0: masterpb.Chunk
	(*HeartbeatReq)(nil),            // 1: masterpb.HeartbeatReq
	(*HeartbeatRes)(nil),            // 2: masterpb.HeartbeatRes
	(*CreateFileReq)(nil),           // 3: masterpb.CreateFileReq
	(*CreateFileRes)(nil),           // 4: masterpb.CreateFileRes
	(*CreateDirectoryReq)(nil),      // 5: masterpb.CreateDirectoryReq
	(*CreateDirectoryRes)(nil),      // 6: masterpb.CreateDirectoryRes
	(*WriteReq)(nil),                // 7: masterpb.WriteReq
	(*WriteRes)(nil),                // 8: masterpb.WriteRes
	(*AppendReq)(nil),               // 9: masterpb.AppendReq
	(*AppendRes)(nil),               // 10: masterpb.AppendRes
	(*ReadReq)(nil),                 // 11: masterpb.ReadReq
	(*ReadRes)(nil),                 // 12: masterpb.ReadRes
	(*DeleteFileReq)(nil),           // 13: masterpb.DeleteFileReq
	(*DeleteFileRes)(nil),           // 14: masterpb.DeleteFileRes
	(*UndeleteFileReq)(nil),         // 15: masterpb.UndeleteFileReq
	(*UndeleteFileRes)(nil),         // 16: masterpb.UndeleteFileRes
	(*RegisterShadowMasterReq)(nil), // 17: masterpb.RegisterShadowMasterReq
	(*RegisterShadowMasterRes)(nil), // 18: masterpb.RegisterShadowMasterRes
	(*LogEntryProto)(nil),           // 19: masterpb.LogEntryProto
	(*ReplicateLogReq)(nil),         // 20: masterpb.ReplicateLogReq
	(*ReplicateLogRes)(nil),         // 21: masterpb.ReplicateLogRes
	(*NotifyMasterFailureReq)(nil),  // 22: masterpb.NotifyMasterFailureReq
	(*NotifyMasterFailureRes)(nil),  // 23: masterpb.NotifyMasterFailureRes
}
var file_protofiles_master_master_proto_depIdxs = []int32{
	0,  // 0: masterpb.HeartbeatReq.Chunks:type_name -> masterpb.Chunk
	19, // 1: masterpb.ReplicateLogReq.entries:type_name -> masterpb.LogEntryProto
	1,  // 2: masterpb.MasterService.HeartbeatRPC:input_type -> masterpb.HeartbeatReq
	3,  // 3: masterpb.MasterService.CreateFileRPC:input_type -> masterpb.CreateFileReq
	5,  // 4: masterpb.MasterService.CreateDirectoryRPC:input_type -> masterpb.CreateDirectoryReq
	7,  // 5: masterpb.MasterService.GetChunkDetailsForWriteRPC:input_type -> masterpb.WriteReq
	9,  // 6: masterpb.MasterService.GetChunkDetailsForAppendRPC:input_type -> masterpb.AppendReq
	11, // 7: masterpb.MasterService.GetChunkDetailsForReadRPC:input_type -> masterpb.ReadReq
	13, // 8: masterpb.MasterService.DeleteFileRPC:input_type -> masterpb.DeleteFileReq
	15, // 9: masterpb.MasterService.UndeleteFileRPC:input_type -> masterpb.UndeleteFileReq
	17, // 10: masterpb.MasterService.RegisterShadowMasterRPC:input_type -> masterpb.RegisterShadowMasterReq
	20, // 11: masterpb.MasterService.ReplicateLogRPC:input_type -> masterpb.ReplicateLogReq
	22, // 12: masterpb.MasterService.NotifyMasterFailureRPC:input_type -> masterpb.NotifyMasterFailureReq
	2,  // 13: masterpb.MasterService.HeartbeatRPC:output_type -> masterpb.HeartbeatRes
	4,  // 14: masterpb.MasterService.CreateFileRPC:output_type -> masterpb.CreateFileRes
	6,  // 15: masterpb.MasterService.CreateDirectoryRPC:output_type -> masterpb.CreateDirectoryRes
	8,  // 16: masterpb.MasterService.GetChunkDetailsForWriteRPC:output_type -> masterpb.WriteRes
	10, // 17: masterpb.MasterService.GetChunkDetailsForAppendRPC:output_type -> masterpb.AppendRes
	12, // 18: masterpb.MasterService.GetChunkDetailsForReadRPC:output_type -> masterpb.ReadRes
	14, // 19: masterpb.MasterService.DeleteFileRPC:output_type -> masterpb.DeleteFileRes
	16, // 20: masterpb.MasterService.UndeleteFileRPC:output_type -> masterpb.UndeleteFileRes
	18, // 21: masterpb.MasterService.RegisterShadowMasterRPC:output_type -> masterpb.RegisterShadowMasterRes
	21, // 22: masterpb.MasterService.ReplicateLogRPC:output_type -> masterpb.ReplicateLogRes
	23, // 23: masterpb.MasterService.NotifyMasterFailureRPC:output_type -> masterpb.NotifyMasterFailureRes
	13, // [13:24] is the sub-list for method output_type
	2,  // [2:13] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_protofiles_master_master_proto_init() }
func file_protofiles_master_master_proto_init() {
	if File_protofiles_master_master_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_protofiles_master_master_proto_rawDesc), len(file_protofiles_master_master_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protofiles_master_master_proto_goTypes,
		DependencyIndexes: file_protofiles_master_master_proto_depIdxs,
		MessageInfos:      file_protofiles_master_master_proto_msgTypes,
	}.Build()
	File_protofiles_master_master_proto = out.File
	file_protofiles_master_master_proto_goTypes = nil
	file_protofiles_master_master_proto_depIdxs = nil
}
