// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: protofiles/chunkserver/chunkserver.proto

package chunkserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AssignChunkReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	Version       int64                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignChunkReq) Reset() {
	*x = AssignChunkReq{}
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignChunkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignChunkReq) ProtoMessage() {}

func (x *AssignChunkReq) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignChunkReq.ProtoReflect.Descriptor instead.
func (*AssignChunkReq) Descriptor() ([]byte, []int) {
	return file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP(), []int{0}
}

func (x *AssignChunkReq) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *AssignChunkReq) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type AssignChunkRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignChunkRes) Reset() {
	*x = AssignChunkRes{}
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignChunkRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignChunkRes) ProtoMessage() {}

func (x *AssignChunkRes) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignChunkRes.ProtoReflect.Descriptor instead.
func (*AssignChunkRes) Descriptor() ([]byte, []int) {
	return file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP(), []int{1}
}

func (x *AssignChunkRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GrantLeaseReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	Version       int64                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Secondaries   []string               `protobuf:"bytes,3,rep,name=secondaries,proto3" json:"secondaries,omitempty"`
	LeaseTime     int64                  `protobuf:"varint,4,opt,name=leaseTime,proto3" json:"leaseTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrantLeaseReq) Reset() {
	*x = GrantLeaseReq{}
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrantLeaseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantLeaseReq) ProtoMessage() {}

func (x *GrantLeaseReq) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantLeaseReq.ProtoReflect.Descriptor instead.
func (*GrantLeaseReq) Descriptor() ([]byte, []int) {
	return file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP(), []int{2}
}

func (x *GrantLeaseReq) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *GrantLeaseReq) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GrantLeaseReq) GetSecondaries() []string {
	if x != nil {
		return x.Secondaries
	}
	return nil
}

func (x *GrantLeaseReq) GetLeaseTime() int64 {
	if x != nil {
		return x.LeaseTime
	}
	return 0
}

type GrantLeaseRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrantLeaseRes) Reset() {
	*x = GrantLeaseRes{}
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrantLeaseRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantLeaseRes) ProtoMessage() {}

func (x *GrantLeaseRes) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantLeaseRes.ProtoReflect.Descriptor instead.
func (*GrantLeaseRes) Descriptor() ([]byte, []int) {
	return file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP(), []int{3}
}

func (x *GrantLeaseRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type PushDataForWriteReq struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ChunkId           string                 `protobuf:"bytes,1,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	Offset            int64                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Data              string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	ClientAddr        string                 `protobuf:"bytes,4,opt,name=clientAddr,proto3" json:"clientAddr,omitempty"`
	RemainingReplicas []string               `protobuf:"bytes,5,rep,name=remainingReplicas,proto3" json:"remainingReplicas,omitempty"`
	ChunkVersion      int64                  `protobuf:"varint,6,opt,name=chunkVersion,proto3" json:"chunkVersion,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PushDataForWriteReq) Reset() {
	*x = PushDataForWriteReq{}
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushDataForWriteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushDataForWriteReq) ProtoMessage() {}

func (x *PushDataForWriteReq) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushDataForWriteReq.ProtoReflect.Descriptor instead.
func (*PushDataForWriteReq) Descriptor() ([]byte, []int) {
	return file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP(), []int{4}
}

func (x *PushDataForWriteReq) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *PushDataForWriteReq) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PushDataForWriteReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *PushDataForWriteReq) GetClientAddr() string {
	if x != nil {
		return x.ClientAddr
	}
	return ""
}

func (x *PushDataForWriteReq) GetRemainingReplicas() []string {
	if x != nil {
		return x.RemainingReplicas
	}
	return nil
}

func (x *PushDataForWriteReq) GetChunkVersion() int64 {
	if x != nil {
		return x.ChunkVersion
	}
	return 0
}

type PushDataForWriteRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushDataForWriteRes) Reset() {
	*x = PushDataForWriteRes{}
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushDataForWriteRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushDataForWriteRes) ProtoMessage() {}

func (x *PushDataForWriteRes) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushDataForWriteRes.ProtoReflect.Descriptor instead.
func (*PushDataForWriteRes) Descriptor() ([]byte, []int) {
	return file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP(), []int{5}
}

func (x *PushDataForWriteRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type CommitWriteReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	ClientAddress string                 `protobuf:"bytes,2,opt,name=clientAddress,proto3" json:"clientAddress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitWriteReq) Reset() {
	*x = CommitWriteReq{}
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitWriteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitWriteReq) ProtoMessage() {}

func (x *CommitWriteReq) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitWriteReq.ProtoReflect.Descriptor instead.
func (*CommitWriteReq) Descriptor() ([]byte, []int) {
	return file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP(), []int{6}
}

func (x *CommitWriteReq) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *CommitWriteReq) GetClientAddress() string {
	if x != nil {
		return x.ClientAddress
	}
	return ""
}

type CommitWriteRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitWriteRes) Reset() {
	*x = CommitWriteRes{}
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitWriteRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitWriteRes) ProtoMessage() {}

func (x *CommitWriteRes) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitWriteRes.ProtoReflect.Descriptor instead.
func (*CommitWriteRes) Descriptor() ([]byte, []int) {
	return file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP(), []int{7}
}

func (x *CommitWriteRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ForwardWriteReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	ClientAddress string                 `protobuf:"bytes,2,opt,name=clientAddress,proto3" json:"clientAddress,omitempty"`
	SerialNumber  int64                  `protobuf:"varint,3,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForwardWriteReq) Reset() {
	*x = ForwardWriteReq{}
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForwardWriteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardWriteReq) ProtoMessage() {}

func (x *ForwardWriteReq) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardWriteReq.ProtoReflect.Descriptor instead.
func (*ForwardWriteReq) Descriptor() ([]byte, []int) {
	return file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP(), []int{8}
}

func (x *ForwardWriteReq) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *ForwardWriteReq) GetClientAddress() string {
	if x != nil {
		return x.ClientAddress
	}
	return ""
}

func (x *ForwardWriteReq) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

type ForwardWriteRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForwardWriteRes) Reset() {
	*x = ForwardWriteRes{}
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForwardWriteRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardWriteRes) ProtoMessage() {}

func (x *ForwardWriteRes) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardWriteRes.ProtoReflect.Descriptor instead.
func (*ForwardWriteRes) Descriptor() ([]byte, []int) {
	return file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP(), []int{9}
}

func (x *ForwardWriteRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type UpdateChunkVersionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateChunkVersionReq) Reset() {
	*x = UpdateChunkVersionReq{}
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateChunkVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChunkVersionReq) ProtoMessage() {}

func (x *UpdateChunkVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChunkVersionReq.ProtoReflect.Descriptor instead.
func (*UpdateChunkVersionReq) Descriptor() ([]byte, []int) {
	return file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateChunkVersionReq) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

type UpdateChunkVersionRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateChunkVersionRes) Reset() {
	*x = UpdateChunkVersionRes{}
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateChunkVersionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChunkVersionRes) ProtoMessage() {}

func (x *UpdateChunkVersionRes) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChunkVersionRes.ProtoReflect.Descriptor instead.
func (*UpdateChunkVersionRes) Descriptor() ([]byte, []int) {
	return file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateChunkVersionRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetChunkSizeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChunkSizeReq) Reset() {
	*x = GetChunkSizeReq{}
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChunkSizeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunkSizeReq) ProtoMessage() {}

func (x *GetChunkSizeReq) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunkSizeReq.ProtoReflect.Descriptor instead.
func (*GetChunkSizeReq) Descriptor() ([]byte, []int) {
	return file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP(), []int{12}
}

func (x *GetChunkSizeReq) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

type GetChunkSizeRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Size          int64                  `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChunkSizeRes) Reset() {
	*x = GetChunkSizeRes{}
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChunkSizeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunkSizeRes) ProtoMessage() {}

func (x *GetChunkSizeRes) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunkSizeRes.ProtoReflect.Descriptor instead.
func (*GetChunkSizeRes) Descriptor() ([]byte, []int) {
	return file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP(), []int{13}
}

func (x *GetChunkSizeRes) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type CommitAppendReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	ClientAddress string                 `protobuf:"bytes,2,opt,name=clientAddress,proto3" json:"clientAddress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitAppendReq) Reset() {
	*x = CommitAppendReq{}
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitAppendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitAppendReq) ProtoMessage() {}

func (x *CommitAppendReq) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitAppendReq.ProtoReflect.Descriptor instead.
func (*CommitAppendReq) Descriptor() ([]byte, []int) {
	return file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP(), []int{14}
}

func (x *CommitAppendReq) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *CommitAppendReq) GetClientAddress() string {
	if x != nil {
		return x.ClientAddress
	}
	return ""
}

type CommitAppendRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Offset        int64                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"` // The offset where the data was appended
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitAppendRes) Reset() {
	*x = CommitAppendRes{}
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitAppendRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitAppendRes) ProtoMessage() {}

func (x *CommitAppendRes) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitAppendRes.ProtoReflect.Descriptor instead.
func (*CommitAppendRes) Descriptor() ([]byte, []int) {
	return file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP(), []int{15}
}

func (x *CommitAppendRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CommitAppendRes) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ForwardAppendReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	ClientAddress string                 `protobuf:"bytes,2,opt,name=clientAddress,proto3" json:"clientAddress,omitempty"`
	SerialNumber  int64                  `protobuf:"varint,3,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForwardAppendReq) Reset() {
	*x = ForwardAppendReq{}
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForwardAppendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardAppendReq) ProtoMessage() {}

func (x *ForwardAppendReq) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardAppendReq.ProtoReflect.Descriptor instead.
func (*ForwardAppendReq) Descriptor() ([]byte, []int) {
	return file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP(), []int{16}
}

func (x *ForwardAppendReq) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *ForwardAppendReq) GetClientAddress() string {
	if x != nil {
		return x.ClientAddress
	}
	return ""
}

func (x *ForwardAppendReq) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

type ForwardAppendRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForwardAppendRes) Reset() {
	*x = ForwardAppendRes{}
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForwardAppendRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardAppendRes) ProtoMessage() {}

func (x *ForwardAppendRes) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardAppendRes.ProtoReflect.Descriptor instead.
func (*ForwardAppendRes) Descriptor() ([]byte, []int) {
	return file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP(), []int{17}
}

func (x *ForwardAppendRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ReadDataReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	Offset        int64                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Length        int64                  `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadDataReq) Reset() {
	*x = ReadDataReq{}
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDataReq) ProtoMessage() {}

func (x *ReadDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDataReq.ProtoReflect.Descriptor instead.
func (*ReadDataReq) Descriptor() ([]byte, []int) {
	return file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP(), []int{18}
}

func (x *ReadDataReq) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *ReadDataReq) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ReadDataReq) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

type ReadDataRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          string                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadDataRes) Reset() {
	*x = ReadDataRes{}
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDataRes) ProtoMessage() {}

func (x *ReadDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDataRes.ProtoReflect.Descriptor instead.
func (*ReadDataRes) Descriptor() ([]byte, []int) {
	return file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP(), []int{19}
}

func (x *ReadDataRes) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ReadDataRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type CloneChunkReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	Version       int64                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	SourceServer  string                 `protobuf:"bytes,3,opt,name=sourceServer,proto3" json:"sourceServer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloneChunkReq) Reset() {
	*x = CloneChunkReq{}
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloneChunkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneChunkReq) ProtoMessage() {}

func (x *CloneChunkReq) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneChunkReq.ProtoReflect.Descriptor instead.
func (*CloneChunkReq) Descriptor() ([]byte, []int) {
	return file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP(), []int{20}
}

func (x *CloneChunkReq) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *CloneChunkReq) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *CloneChunkReq) GetSourceServer() string {
	if x != nil {
		return x.SourceServer
	}
	return ""
}

type CloneChunkRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloneChunkRes) Reset() {
	*x = CloneChunkRes{}
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloneChunkRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneChunkRes) ProtoMessage() {}

func (x *CloneChunkRes) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneChunkRes.ProtoReflect.Descriptor instead.
func (*CloneChunkRes) Descriptor() ([]byte, []int) {
	return file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP(), []int{21}
}

func (x *CloneChunkRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetChunkInfoAndDataReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChunkInfoAndDataReq) Reset() {
	*x = GetChunkInfoAndDataReq{}
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChunkInfoAndDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunkInfoAndDataReq) ProtoMessage() {}

func (x *GetChunkInfoAndDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunkInfoAndDataReq.ProtoReflect.Descriptor instead.
func (*GetChunkInfoAndDataReq) Descriptor() ([]byte, []int) {
	return file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP(), []int{22}
}

func (x *GetChunkInfoAndDataReq) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

type GetChunkInfoAndDataRes struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SerialNumber     int64                  `protobuf:"varint,1,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
	NextSerialNumber int64                  `protobuf:"varint,2,opt,name=nextSerialNumber,proto3" json:"nextSerialNumber,omitempty"`
	LastAppendSerial int64                  `protobuf:"varint,3,opt,name=lastAppendSerial,proto3" json:"lastAppendSerial,omitempty"`
	Version          int64                  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	Data             string                 `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetChunkInfoAndDataRes) Reset() {
	*x = GetChunkInfoAndDataRes{}
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChunkInfoAndDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunkInfoAndDataRes) ProtoMessage() {}

func (x *GetChunkInfoAndDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunkInfoAndDataRes.ProtoReflect.Descriptor instead.
func (*GetChunkInfoAndDataRes) Descriptor() ([]byte, []int) {
	return file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP(), []int{23}
}

func (x *GetChunkInfoAndDataRes) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *GetChunkInfoAndDataRes) GetNextSerialNumber() int64 {
	if x != nil {
		return x.NextSerialNumber
	}
	return 0
}

func (x *GetChunkInfoAndDataRes) GetLastAppendSerial() int64 {
	if x != nil {
		return x.LastAppendSerial
	}
	return 0
}

func (x *GetChunkInfoAndDataRes) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GetChunkInfoAndDataRes) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP(), []int{24}
}

type DeleteChunkReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkID       string                 `protobuf:"bytes,1,opt,name=chunkID,proto3" json:"chunkID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteChunkReq) Reset() {
	*x = DeleteChunkReq{}
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteChunkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChunkReq) ProtoMessage() {}

func (x *DeleteChunkReq) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChunkReq.ProtoReflect.Descriptor instead.
func (*DeleteChunkReq) Descriptor() ([]byte, []int) {
	return file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteChunkReq) GetChunkID() string {
	if x != nil {
		return x.ChunkID
	}
	return ""
}

type DeleteChunkRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteChunkRes) Reset() {
	*x = DeleteChunkRes{}
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteChunkRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChunkRes) ProtoMessage() {}

func (x *DeleteChunkRes) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chunkserver_chunkserver_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChunkRes.ProtoReflect.Descriptor instead.
func (*DeleteChunkRes) Descriptor() ([]byte, []int) {
	return file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteChunkRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_protofiles_chunkserver_chunkserver_proto protoreflect.FileDescriptor

var file_protofiles_chunkserver_chunkserver_proto_rawDesc = string([]byte{
	0x0a, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x22, 0x44, 0x0a, 0x0e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x2a, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0d,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x29, 0x0a, 0x0d, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xcd, 0x01, 0x0a,
	0x13, 0x50, 0x75, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x13,
	0x50, 0x75, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x50, 0x0a,
	0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x2a, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x75, 0x0a, 0x0f, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x2b, 0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x31, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x49, 0x64, 0x22, 0x31, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x2b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x49, 0x64, 0x22, 0x25, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x51, 0x0a, 0x0f, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x43, 0x0a, 0x0f,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x22, 0x76, 0x0a, 0x10, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x41, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x2c, 0x0a, 0x10, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x57, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x22, 0x3b, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x67, 0x0a,
	0x0d, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x29, 0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x32, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x41, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x49, 0x64, 0x22, 0xc2, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x2a, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x44, 0x22,
	0x2a, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0x97, 0x09, 0x0a, 0x12,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x52, 0x50, 0x43, 0x12, 0x1d, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52,
	0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x50, 0x43, 0x12, 0x1c, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70,
	0x62, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x12,
	0x5d, 0x0a, 0x13, 0x50, 0x75, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x50, 0x43, 0x12, 0x22, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x46,
	0x6f, 0x72, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x44,
	0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x4e,
	0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x50, 0x43,
	0x12, 0x1d, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x1d, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x51,
	0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x50,
	0x43, 0x12, 0x1e, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70,
	0x62, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x1e, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70,
	0x62, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x12, 0x63, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x50, 0x43, 0x12, 0x24, 0x2e, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x24, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x50, 0x43, 0x12, 0x1e, 0x2e, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0f, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x50, 0x43, 0x12, 0x1e, 0x2e, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x10,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x50, 0x43,
	0x12, 0x1f, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62,
	0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70,
	0x62, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x50,
	0x43, 0x12, 0x1a, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x43, 0x6c, 0x6f,
	0x6e, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x50, 0x43, 0x12, 0x1c, 0x2e, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x50, 0x43,
	0x12, 0x25, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x41, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x12, 0x35,
	0x0a, 0x07, 0x45, 0x78, 0x69, 0x74, 0x52, 0x50, 0x43, 0x12, 0x14, 0x2e, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x14, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x52, 0x50, 0x43, 0x12, 0x1d, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x52, 0x65, 0x73, 0x42, 0x58, 0x5a, 0x56, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x61, 0x68, 0x61, 0x72, 0x69, 0x73, 0x69, 0x72, 0x69, 0x31, 0x32,
	0x33, 0x2f, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2d, 0x46, 0x69, 0x6c, 0x65, 0x2d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_protofiles_chunkserver_chunkserver_proto_rawDescOnce sync.Once
	file_protofiles_chunkserver_chunkserver_proto_rawDescData []byte
)

func file_protofiles_chunkserver_chunkserver_proto_rawDescGZIP() []byte {
	file_protofiles_chunkserver_chunkserver_proto_rawDescOnce.Do(func() {
		file_protofiles_chunkserver_chunkserver_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_protofiles_chunkserver_chunkserver_proto_rawDesc), len(file_protofiles_chunkserver_chunkserver_proto_rawDesc)))
	})
	return file_protofiles_chunkserver_chunkserver_proto_rawDescData
}

var file_protofiles_chunkserver_chunkserver_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_protofiles_chunkserver_chunkserver_proto_goTypes = []any{
	(*AssignChunkReq)(nil),         // 0: chunkserverpb.AssignChunkReq
	(*AssignChunkRes)(nil),         // 1: chunkserverpb.AssignChunkRes
	(*GrantLeaseReq)(nil),          // 2: chunkserverpb.GrantLeaseReq
	(*GrantLeaseRes)(nil),          // 3: chunkserverpb.GrantLeaseRes
	(*PushDataForWriteReq)(nil),    // 4: chunkserverpb.PushDataForWriteReq
	(*PushDataForWriteRes)(nil),    // 5: chunkserverpb.PushDataForWriteRes
	(*CommitWriteReq)(nil),         // 6: chunkserverpb.CommitWriteReq
	(*CommitWriteRes)(nil),         // 7: chunkserverpb.CommitWriteRes
	(*ForwardWriteReq)(nil),        // 8: chunkserverpb.ForwardWriteReq
	(*ForwardWriteRes)(nil),        // 9: chunkserverpb.ForwardWriteRes
	(*UpdateChunkVersionReq)(nil),  // 10: chunkserverpb.UpdateChunkVersionReq
	(*UpdateChunkVersionRes)(nil),  // 11: chunkserverpb.UpdateChunkVersionRes
	(*GetChunkSizeReq)(nil),        // 12: chunkserverpb.GetChunkSizeReq
	(*GetChunkSizeRes)(nil),        // 13: chunkserverpb.GetChunkSizeRes
	(*CommitAppendReq)(nil),        // 14: chunkserverpb.CommitAppendReq
	(*CommitAppendRes)(nil),        // 15: chunkserverpb.CommitAppendRes
	(*ForwardAppendReq)(nil),       // 16: chunkserverpb.ForwardAppendReq
	(*ForwardAppendRes)(nil),       // 17: chunkserverpb.ForwardAppendRes
	(*ReadDataReq)(nil),            // 18: chunkserverpb.ReadDataReq
	(*ReadDataRes)(nil),            // 19: chunkserverpb.ReadDataRes
	(*CloneChunkReq)(nil),          // 20: chunkserverpb.CloneChunkReq
	(*CloneChunkRes)(nil),          // 21: chunkserverpb.CloneChunkRes
	(*GetChunkInfoAndDataReq)(nil), // 22: chunkserverpb.GetChunkInfoAndDataReq
	(*GetChunkInfoAndDataRes)(nil), // 23: chunkserverpb.GetChunkInfoAndDataRes
	(*Empty)(nil),                  // 24: chunkserverpb.Empty
	(*DeleteChunkReq)(nil),         // 25: chunkserverpb.DeleteChunkReq
	(*DeleteChunkRes)(nil),         // 26: chunkserverpb.DeleteChunkRes
}
var file_protofiles_chunkserver_chunkserver_proto_depIdxs = []int32{
	0,  // 0: chunkserverpb.ChunkserverService.AssignChunkRPC:input_type -> chunkserverpb.AssignChunkReq
	2,  // 1: chunkserverpb.ChunkserverService.GrantLeaseRPC:input_type -> chunkserverpb.GrantLeaseReq
	4,  // 2: chunkserverpb.ChunkserverService.PushDataForWriteRPC:input_type -> chunkserverpb.PushDataForWriteReq
	6,  // 3: chunkserverpb.ChunkserverService.CommitWriteRPC:input_type -> chunkserverpb.CommitWriteReq
	8,  // 4: chunkserverpb.ChunkserverService.ForwardWriteRPC:input_type -> chunkserverpb.ForwardWriteReq
	10, // 5: chunkserverpb.ChunkserverService.UpdateChunkVersionRPC:input_type -> chunkserverpb.UpdateChunkVersionReq
	12, // 6: chunkserverpb.ChunkserverService.GetChunkSizeRPC:input_type -> chunkserverpb.GetChunkSizeReq
	14, // 7: chunkserverpb.ChunkserverService.CommitAppendRPC:input_type -> chunkserverpb.CommitAppendReq
	16, // 8: chunkserverpb.ChunkserverService.ForwardAppendRPC:input_type -> chunkserverpb.ForwardAppendReq
	18, // 9: chunkserverpb.ChunkserverService.ReadDataRPC:input_type -> chunkserverpb.ReadDataReq
	20, // 10: chunkserverpb.ChunkserverService.CloneChunkRPC:input_type -> chunkserverpb.CloneChunkReq
	22, // 11: chunkserverpb.ChunkserverService.GetChunkInfoAndDataRPC:input_type -> chunkserverpb.GetChunkInfoAndDataReq
	24, // 12: chunkserverpb.ChunkserverService.ExitRPC:input_type -> chunkserverpb.Empty
	25, // 13: chunkserverpb.ChunkserverService.DeleteChunkRPC:input_type -> chunkserverpb.DeleteChunkReq
	1,  // 14: chunkserverpb.ChunkserverService.AssignChunkRPC:output_type -> chunkserverpb.AssignChunkRes
	3,  // 15: chunkserverpb.ChunkserverService.GrantLeaseRPC:output_type -> chunkserverpb.GrantLeaseRes
	5,  // 16: chunkserverpb.ChunkserverService.PushDataForWriteRPC:output_type -> chunkserverpb.PushDataForWriteRes
	7,  // 17: chunkserverpb.ChunkserverService.CommitWriteRPC:output_type -> chunkserverpb.CommitWriteRes
	9,  // 18: chunkserverpb.ChunkserverService.ForwardWriteRPC:output_type -> chunkserverpb.ForwardWriteRes
	11, // 19: chunkserverpb.ChunkserverService.UpdateChunkVersionRPC:output_type -> chunkserverpb.UpdateChunkVersionRes
	13, // 20: chunkserverpb.ChunkserverService.GetChunkSizeRPC:output_type -> chunkserverpb.GetChunkSizeRes
	15, // 21: chunkserverpb.ChunkserverService.CommitAppendRPC:output_type -> chunkserverpb.CommitAppendRes
	17, // 22: chunkserverpb.ChunkserverService.ForwardAppendRPC:output_type -> chunkserverpb.ForwardAppendRes
	19, // 23: chunkserverpb.ChunkserverService.ReadDataRPC:output_type -> chunkserverpb.ReadDataRes
	21, // 24: chunkserverpb.ChunkserverService.CloneChunkRPC:output_type -> chunkserverpb.CloneChunkRes
	23, // 25: chunkserverpb.ChunkserverService.GetChunkInfoAndDataRPC:output_type -> chunkserverpb.GetChunkInfoAndDataRes
	24, // 26: chunkserverpb.ChunkserverService.ExitRPC:output_type -> chunkserverpb.Empty
	26, // 27: chunkserverpb.ChunkserverService.DeleteChunkRPC:output_type -> chunkserverpb.DeleteChunkRes
	14, // [14:28] is the sub-list for method output_type
	0,  // [0:14] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_protofiles_chunkserver_chunkserver_proto_init() }
func file_protofiles_chunkserver_chunkserver_proto_init() {
	if File_protofiles_chunkserver_chunkserver_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_protofiles_chunkserver_chunkserver_proto_rawDesc), len(file_protofiles_chunkserver_chunkserver_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protofiles_chunkserver_chunkserver_proto_goTypes,
		DependencyIndexes: file_protofiles_chunkserver_chunkserver_proto_depIdxs,
		MessageInfos:      file_protofiles_chunkserver_chunkserver_proto_msgTypes,
	}.Build()
	File_protofiles_chunkserver_chunkserver_proto = out.File
	file_protofiles_chunkserver_chunkserver_proto_goTypes = nil
	file_protofiles_chunkserver_chunkserver_proto_depIdxs = nil
}
