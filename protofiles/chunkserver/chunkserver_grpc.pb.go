// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: protofiles/chunkserver/chunkserver.proto

package chunkserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChunkserverService_AssignChunkRPC_FullMethodName         = "/chunkserverpb.ChunkserverService/AssignChunkRPC"
	ChunkserverService_GrantLeaseRPC_FullMethodName          = "/chunkserverpb.ChunkserverService/GrantLeaseRPC"
	ChunkserverService_PushDataForWriteRPC_FullMethodName    = "/chunkserverpb.ChunkserverService/PushDataForWriteRPC"
	ChunkserverService_CommitWriteRPC_FullMethodName         = "/chunkserverpb.ChunkserverService/CommitWriteRPC"
	ChunkserverService_ForwardWriteRPC_FullMethodName        = "/chunkserverpb.ChunkserverService/ForwardWriteRPC"
	ChunkserverService_UpdateChunkVersionRPC_FullMethodName  = "/chunkserverpb.ChunkserverService/UpdateChunkVersionRPC"
	ChunkserverService_GetChunkSizeRPC_FullMethodName        = "/chunkserverpb.ChunkserverService/GetChunkSizeRPC"
	ChunkserverService_CommitAppendRPC_FullMethodName        = "/chunkserverpb.ChunkserverService/CommitAppendRPC"
	ChunkserverService_ForwardAppendRPC_FullMethodName       = "/chunkserverpb.ChunkserverService/ForwardAppendRPC"
	ChunkserverService_ReadDataRPC_FullMethodName            = "/chunkserverpb.ChunkserverService/ReadDataRPC"
	ChunkserverService_CloneChunkRPC_FullMethodName          = "/chunkserverpb.ChunkserverService/CloneChunkRPC"
	ChunkserverService_GetChunkInfoAndDataRPC_FullMethodName = "/chunkserverpb.ChunkserverService/GetChunkInfoAndDataRPC"
	ChunkserverService_ExitRPC_FullMethodName                = "/chunkserverpb.ChunkserverService/ExitRPC"
	ChunkserverService_DeleteChunkRPC_FullMethodName         = "/chunkserverpb.ChunkserverService/DeleteChunkRPC"
)

// ChunkserverServiceClient is the client API for ChunkserverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChunkserverServiceClient interface {
	AssignChunkRPC(ctx context.Context, in *AssignChunkReq, opts ...grpc.CallOption) (*AssignChunkRes, error)
	GrantLeaseRPC(ctx context.Context, in *GrantLeaseReq, opts ...grpc.CallOption) (*GrantLeaseRes, error)
	PushDataForWriteRPC(ctx context.Context, in *PushDataForWriteReq, opts ...grpc.CallOption) (*PushDataForWriteRes, error)
	CommitWriteRPC(ctx context.Context, in *CommitWriteReq, opts ...grpc.CallOption) (*CommitWriteRes, error)
	ForwardWriteRPC(ctx context.Context, in *ForwardWriteReq, opts ...grpc.CallOption) (*ForwardWriteRes, error)
	UpdateChunkVersionRPC(ctx context.Context, in *UpdateChunkVersionReq, opts ...grpc.CallOption) (*UpdateChunkVersionRes, error)
	GetChunkSizeRPC(ctx context.Context, in *GetChunkSizeReq, opts ...grpc.CallOption) (*GetChunkSizeRes, error)
	CommitAppendRPC(ctx context.Context, in *CommitAppendReq, opts ...grpc.CallOption) (*CommitAppendRes, error)
	ForwardAppendRPC(ctx context.Context, in *ForwardAppendReq, opts ...grpc.CallOption) (*ForwardAppendRes, error)
	ReadDataRPC(ctx context.Context, in *ReadDataReq, opts ...grpc.CallOption) (*ReadDataRes, error)
	CloneChunkRPC(ctx context.Context, in *CloneChunkReq, opts ...grpc.CallOption) (*CloneChunkRes, error)
	GetChunkInfoAndDataRPC(ctx context.Context, in *GetChunkInfoAndDataReq, opts ...grpc.CallOption) (*GetChunkInfoAndDataRes, error)
	ExitRPC(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	DeleteChunkRPC(ctx context.Context, in *DeleteChunkReq, opts ...grpc.CallOption) (*DeleteChunkRes, error)
}

type chunkserverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChunkserverServiceClient(cc grpc.ClientConnInterface) ChunkserverServiceClient {
	return &chunkserverServiceClient{cc}
}

func (c *chunkserverServiceClient) AssignChunkRPC(ctx context.Context, in *AssignChunkReq, opts ...grpc.CallOption) (*AssignChunkRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignChunkRes)
	err := c.cc.Invoke(ctx, ChunkserverService_AssignChunkRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkserverServiceClient) GrantLeaseRPC(ctx context.Context, in *GrantLeaseReq, opts ...grpc.CallOption) (*GrantLeaseRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GrantLeaseRes)
	err := c.cc.Invoke(ctx, ChunkserverService_GrantLeaseRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkserverServiceClient) PushDataForWriteRPC(ctx context.Context, in *PushDataForWriteReq, opts ...grpc.CallOption) (*PushDataForWriteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushDataForWriteRes)
	err := c.cc.Invoke(ctx, ChunkserverService_PushDataForWriteRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkserverServiceClient) CommitWriteRPC(ctx context.Context, in *CommitWriteReq, opts ...grpc.CallOption) (*CommitWriteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitWriteRes)
	err := c.cc.Invoke(ctx, ChunkserverService_CommitWriteRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkserverServiceClient) ForwardWriteRPC(ctx context.Context, in *ForwardWriteReq, opts ...grpc.CallOption) (*ForwardWriteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForwardWriteRes)
	err := c.cc.Invoke(ctx, ChunkserverService_ForwardWriteRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkserverServiceClient) UpdateChunkVersionRPC(ctx context.Context, in *UpdateChunkVersionReq, opts ...grpc.CallOption) (*UpdateChunkVersionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateChunkVersionRes)
	err := c.cc.Invoke(ctx, ChunkserverService_UpdateChunkVersionRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkserverServiceClient) GetChunkSizeRPC(ctx context.Context, in *GetChunkSizeReq, opts ...grpc.CallOption) (*GetChunkSizeRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChunkSizeRes)
	err := c.cc.Invoke(ctx, ChunkserverService_GetChunkSizeRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkserverServiceClient) CommitAppendRPC(ctx context.Context, in *CommitAppendReq, opts ...grpc.CallOption) (*CommitAppendRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitAppendRes)
	err := c.cc.Invoke(ctx, ChunkserverService_CommitAppendRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkserverServiceClient) ForwardAppendRPC(ctx context.Context, in *ForwardAppendReq, opts ...grpc.CallOption) (*ForwardAppendRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForwardAppendRes)
	err := c.cc.Invoke(ctx, ChunkserverService_ForwardAppendRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkserverServiceClient) ReadDataRPC(ctx context.Context, in *ReadDataReq, opts ...grpc.CallOption) (*ReadDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadDataRes)
	err := c.cc.Invoke(ctx, ChunkserverService_ReadDataRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkserverServiceClient) CloneChunkRPC(ctx context.Context, in *CloneChunkReq, opts ...grpc.CallOption) (*CloneChunkRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloneChunkRes)
	err := c.cc.Invoke(ctx, ChunkserverService_CloneChunkRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkserverServiceClient) GetChunkInfoAndDataRPC(ctx context.Context, in *GetChunkInfoAndDataReq, opts ...grpc.CallOption) (*GetChunkInfoAndDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChunkInfoAndDataRes)
	err := c.cc.Invoke(ctx, ChunkserverService_GetChunkInfoAndDataRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkserverServiceClient) ExitRPC(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ChunkserverService_ExitRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkserverServiceClient) DeleteChunkRPC(ctx context.Context, in *DeleteChunkReq, opts ...grpc.CallOption) (*DeleteChunkRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteChunkRes)
	err := c.cc.Invoke(ctx, ChunkserverService_DeleteChunkRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChunkserverServiceServer is the server API for ChunkserverService service.
// All implementations must embed UnimplementedChunkserverServiceServer
// for forward compatibility.
type ChunkserverServiceServer interface {
	AssignChunkRPC(context.Context, *AssignChunkReq) (*AssignChunkRes, error)
	GrantLeaseRPC(context.Context, *GrantLeaseReq) (*GrantLeaseRes, error)
	PushDataForWriteRPC(context.Context, *PushDataForWriteReq) (*PushDataForWriteRes, error)
	CommitWriteRPC(context.Context, *CommitWriteReq) (*CommitWriteRes, error)
	ForwardWriteRPC(context.Context, *ForwardWriteReq) (*ForwardWriteRes, error)
	UpdateChunkVersionRPC(context.Context, *UpdateChunkVersionReq) (*UpdateChunkVersionRes, error)
	GetChunkSizeRPC(context.Context, *GetChunkSizeReq) (*GetChunkSizeRes, error)
	CommitAppendRPC(context.Context, *CommitAppendReq) (*CommitAppendRes, error)
	ForwardAppendRPC(context.Context, *ForwardAppendReq) (*ForwardAppendRes, error)
	ReadDataRPC(context.Context, *ReadDataReq) (*ReadDataRes, error)
	CloneChunkRPC(context.Context, *CloneChunkReq) (*CloneChunkRes, error)
	GetChunkInfoAndDataRPC(context.Context, *GetChunkInfoAndDataReq) (*GetChunkInfoAndDataRes, error)
	ExitRPC(context.Context, *Empty) (*Empty, error)
	DeleteChunkRPC(context.Context, *DeleteChunkReq) (*DeleteChunkRes, error)
	mustEmbedUnimplementedChunkserverServiceServer()
}

// UnimplementedChunkserverServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChunkserverServiceServer struct{}

func (UnimplementedChunkserverServiceServer) AssignChunkRPC(context.Context, *AssignChunkReq) (*AssignChunkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignChunkRPC not implemented")
}
func (UnimplementedChunkserverServiceServer) GrantLeaseRPC(context.Context, *GrantLeaseReq) (*GrantLeaseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantLeaseRPC not implemented")
}
func (UnimplementedChunkserverServiceServer) PushDataForWriteRPC(context.Context, *PushDataForWriteReq) (*PushDataForWriteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushDataForWriteRPC not implemented")
}
func (UnimplementedChunkserverServiceServer) CommitWriteRPC(context.Context, *CommitWriteReq) (*CommitWriteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitWriteRPC not implemented")
}
func (UnimplementedChunkserverServiceServer) ForwardWriteRPC(context.Context, *ForwardWriteReq) (*ForwardWriteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardWriteRPC not implemented")
}
func (UnimplementedChunkserverServiceServer) UpdateChunkVersionRPC(context.Context, *UpdateChunkVersionReq) (*UpdateChunkVersionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChunkVersionRPC not implemented")
}
func (UnimplementedChunkserverServiceServer) GetChunkSizeRPC(context.Context, *GetChunkSizeReq) (*GetChunkSizeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunkSizeRPC not implemented")
}
func (UnimplementedChunkserverServiceServer) CommitAppendRPC(context.Context, *CommitAppendReq) (*CommitAppendRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitAppendRPC not implemented")
}
func (UnimplementedChunkserverServiceServer) ForwardAppendRPC(context.Context, *ForwardAppendReq) (*ForwardAppendRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardAppendRPC not implemented")
}
func (UnimplementedChunkserverServiceServer) ReadDataRPC(context.Context, *ReadDataReq) (*ReadDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDataRPC not implemented")
}
func (UnimplementedChunkserverServiceServer) CloneChunkRPC(context.Context, *CloneChunkReq) (*CloneChunkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneChunkRPC not implemented")
}
func (UnimplementedChunkserverServiceServer) GetChunkInfoAndDataRPC(context.Context, *GetChunkInfoAndDataReq) (*GetChunkInfoAndDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunkInfoAndDataRPC not implemented")
}
func (UnimplementedChunkserverServiceServer) ExitRPC(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitRPC not implemented")
}
func (UnimplementedChunkserverServiceServer) DeleteChunkRPC(context.Context, *DeleteChunkReq) (*DeleteChunkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChunkRPC not implemented")
}
func (UnimplementedChunkserverServiceServer) mustEmbedUnimplementedChunkserverServiceServer() {}
func (UnimplementedChunkserverServiceServer) testEmbeddedByValue()                            {}

// UnsafeChunkserverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChunkserverServiceServer will
// result in compilation errors.
type UnsafeChunkserverServiceServer interface {
	mustEmbedUnimplementedChunkserverServiceServer()
}

func RegisterChunkserverServiceServer(s grpc.ServiceRegistrar, srv ChunkserverServiceServer) {
	// If the following call pancis, it indicates UnimplementedChunkserverServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChunkserverService_ServiceDesc, srv)
}

func _ChunkserverService_AssignChunkRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignChunkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkserverServiceServer).AssignChunkRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkserverService_AssignChunkRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkserverServiceServer).AssignChunkRPC(ctx, req.(*AssignChunkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkserverService_GrantLeaseRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantLeaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkserverServiceServer).GrantLeaseRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkserverService_GrantLeaseRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkserverServiceServer).GrantLeaseRPC(ctx, req.(*GrantLeaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkserverService_PushDataForWriteRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushDataForWriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkserverServiceServer).PushDataForWriteRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkserverService_PushDataForWriteRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkserverServiceServer).PushDataForWriteRPC(ctx, req.(*PushDataForWriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkserverService_CommitWriteRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitWriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkserverServiceServer).CommitWriteRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkserverService_CommitWriteRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkserverServiceServer).CommitWriteRPC(ctx, req.(*CommitWriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkserverService_ForwardWriteRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardWriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkserverServiceServer).ForwardWriteRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkserverService_ForwardWriteRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkserverServiceServer).ForwardWriteRPC(ctx, req.(*ForwardWriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkserverService_UpdateChunkVersionRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChunkVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkserverServiceServer).UpdateChunkVersionRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkserverService_UpdateChunkVersionRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkserverServiceServer).UpdateChunkVersionRPC(ctx, req.(*UpdateChunkVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkserverService_GetChunkSizeRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChunkSizeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkserverServiceServer).GetChunkSizeRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkserverService_GetChunkSizeRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkserverServiceServer).GetChunkSizeRPC(ctx, req.(*GetChunkSizeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkserverService_CommitAppendRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitAppendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkserverServiceServer).CommitAppendRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkserverService_CommitAppendRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkserverServiceServer).CommitAppendRPC(ctx, req.(*CommitAppendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkserverService_ForwardAppendRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardAppendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkserverServiceServer).ForwardAppendRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkserverService_ForwardAppendRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkserverServiceServer).ForwardAppendRPC(ctx, req.(*ForwardAppendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkserverService_ReadDataRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkserverServiceServer).ReadDataRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkserverService_ReadDataRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkserverServiceServer).ReadDataRPC(ctx, req.(*ReadDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkserverService_CloneChunkRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneChunkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkserverServiceServer).CloneChunkRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkserverService_CloneChunkRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkserverServiceServer).CloneChunkRPC(ctx, req.(*CloneChunkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkserverService_GetChunkInfoAndDataRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChunkInfoAndDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkserverServiceServer).GetChunkInfoAndDataRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkserverService_GetChunkInfoAndDataRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkserverServiceServer).GetChunkInfoAndDataRPC(ctx, req.(*GetChunkInfoAndDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkserverService_ExitRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkserverServiceServer).ExitRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkserverService_ExitRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkserverServiceServer).ExitRPC(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkserverService_DeleteChunkRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChunkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkserverServiceServer).DeleteChunkRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkserverService_DeleteChunkRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkserverServiceServer).DeleteChunkRPC(ctx, req.(*DeleteChunkReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ChunkserverService_ServiceDesc is the grpc.ServiceDesc for ChunkserverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChunkserverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chunkserverpb.ChunkserverService",
	HandlerType: (*ChunkserverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignChunkRPC",
			Handler:    _ChunkserverService_AssignChunkRPC_Handler,
		},
		{
			MethodName: "GrantLeaseRPC",
			Handler:    _ChunkserverService_GrantLeaseRPC_Handler,
		},
		{
			MethodName: "PushDataForWriteRPC",
			Handler:    _ChunkserverService_PushDataForWriteRPC_Handler,
		},
		{
			MethodName: "CommitWriteRPC",
			Handler:    _ChunkserverService_CommitWriteRPC_Handler,
		},
		{
			MethodName: "ForwardWriteRPC",
			Handler:    _ChunkserverService_ForwardWriteRPC_Handler,
		},
		{
			MethodName: "UpdateChunkVersionRPC",
			Handler:    _ChunkserverService_UpdateChunkVersionRPC_Handler,
		},
		{
			MethodName: "GetChunkSizeRPC",
			Handler:    _ChunkserverService_GetChunkSizeRPC_Handler,
		},
		{
			MethodName: "CommitAppendRPC",
			Handler:    _ChunkserverService_CommitAppendRPC_Handler,
		},
		{
			MethodName: "ForwardAppendRPC",
			Handler:    _ChunkserverService_ForwardAppendRPC_Handler,
		},
		{
			MethodName: "ReadDataRPC",
			Handler:    _ChunkserverService_ReadDataRPC_Handler,
		},
		{
			MethodName: "CloneChunkRPC",
			Handler:    _ChunkserverService_CloneChunkRPC_Handler,
		},
		{
			MethodName: "GetChunkInfoAndDataRPC",
			Handler:    _ChunkserverService_GetChunkInfoAndDataRPC_Handler,
		},
		{
			MethodName: "ExitRPC",
			Handler:    _ChunkserverService_ExitRPC_Handler,
		},
		{
			MethodName: "DeleteChunkRPC",
			Handler:    _ChunkserverService_DeleteChunkRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/chunkserver/chunkserver.proto",
}
